/*
progs.h - Quake virtual machine wrapper impmenentation
Copyright (C) 2017 Uncle Mike

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

#ifndef PROGS_H
#define PROGS_H

#include "pr_comp.h"	// defs shared with qcc
#include "progdefs_q1.h"	// generated by program cdefs

#define MAX_STACK_DEPTH	32
#define LOCALSTACK_SIZE	2048
#define MAX_VAR_STRING	8192
#define MAX_VAR_ARG		1024

#define NUM_SPAWN_PARMS	16
#define MAX_CLIENTS		32
#define MAX_MESSAGES	256

#define G_FLOAT( o )	(pr.globals[o])
#define G_INT( o )		(*(int *)&pr.globals[o])
#define G_EDICT( o )	INDEXENT(*(int *)&pr.globals[o])
#define G_EDICTNUM( o )	ENTINDEX( G_EDICT( o ))
#define G_VECTOR( o )	(&pr.globals[o])
#define G_STRING( o )	(STRING( *(string_t *)&pr.globals[o] ))
#define G_FUNCTION( o )	(*(func_t *)&pr.globals[o])
#define RETURN_EDICT( e )	(((int *)pr.globals)[OFS_RETURN] = ENTINDEX( e ))

#define E_STRING( ev, o )	(STRING( *(string_t *)&((float *)ev)[o] ))
#define E_FLOAT( ev, o )	(((float *)ev)[o] )

#define GETEDICTFIELDVALUE( ed, fieldoffset ) (( fieldoffset > 0 ) ? (eval_t *)((char *)ed->pvPrivateData + fieldoffset) : NULL)
#define GETEGLOBALVALUE( globaloffset ) (( globaloffset > 0 ) ? (eval_t *)((char *)pr.globals + globaloffset) : NULL)

// generic data holder
typedef union eval_s
{
	string_t		string;
	float		value;
	float		vector[3];
	func_t		function;
	int		integer;
	int		edict;
} eval_t;

typedef struct
{
	int		s;
	dfunction_t	*f;
} prstack_t;

typedef enum
{
	MSG_VOID = 0,
	MSG_BYTE,
	MSG_CHAR,
	MSG_SHORT,
	MSG_LONG,
	MSG_ANGLE,
	MSG_COORD,
	MSG_STRING,
	MSG_ENTITY
};

typedef struct
{
	int		type;
	int		dest;
	edict_t		*entity;		// NULL for dest != MSG_ONE

	union
	{
		int	integer;		// holds int, short, char, byte, entity 
		float	value;		// holds coords, angle
		char	*string;		// pointer to string
	};

} pr_message_t;

typedef void (*builtin_t)( void );

typedef struct
{
	bool		server_hud_initialized;
	bool		client_hud_initialized;
	float		health;
	int		items;
	int		weapon;
	float		weaponframe;
	int		currentammo;
	int		ammo_shells;
	int		ammo_nails;
	int		ammo_rockets;
	int		ammo_cells;
	int		armorvalue;
	float		frags;
} pr_client_cache_t;

typedef struct
{
	dprograms_t	*progs;
	unsigned short	crc;

	dfunction_t	*functions;
	ddef_t		*globaldefs;
	ddef_t		*fielddefs;
	dstatement_t	*statements;
	pr_globalvars_t	*global_struct;
	float		*globals;		// same as pr_global_struct
	dfunction_t	*xfunction;
	int		xstatement;

	builtin_t		*builtins;
	int		numbuiltins;

	int		edict_size;	// in bytes
	int		global_size;	// in bytes
	int		argc;
	bool		trace;
	bool		precache;
	bool		loadgame;
	int		cached_fog;

	float		spawn_parms[MAX_CLIENTS][NUM_SPAWN_PARMS];
	pr_client_cache_t	client_cache[MAX_CLIENTS];
	bool		changelevel[MAX_CLIENTS];
	float		serverflags;	// save for transition

	// moved out of stack
	edict_t		*moved_edict[4096];
	vec3_t		moved_from[4096];
	int		num_moved;

	pr_message_t	messages[MAX_MESSAGES];
	int		num_messages;

	char		string_temp[256];

	prstack_t		stack[MAX_STACK_DEPTH];
	int		depth;

	int		localstack[LOCALSTACK_SIZE];
	int		localstack_used;

	int		eval_gravity;
	int		eval_items2;
	int		eval_alpha;
	int		eval_fullbright;
	int		eval_idealpitch;
	int		eval_pitch_speed;
	int		eval_classtype;
	int		glob_framecount;
	func_t		pfnRestoreGame;

	pr_entvars_t	*temp_entvars;
	pr_globalvars_t	*source_globals;
	pr_globalvars_t	*temp_globals;
} prog_state_t;

extern const int		gProgSizes[8];
extern prog_state_t		pr;

//
// pr_edict.cpp
//
void PR_LoadProgs( const char *progname );
void PR_UnloadProgs( void );

int ED_LoadFromFile( const char *mapname, char *data );
void ED_SpawnEdict( edict_t *ent, pr_entvars_t *pev );
void ED_PrecacheEdict( edict_t *ent, pr_entvars_t *pev );
void PR_ResetGlobalState( void );
void ED_InitEdict( edict_t *ent );

// misc
ddef_t *ED_GlobalAtOfs( int ofs );
ddef_t *ED_FieldAtOfs( int ofs );
ddef_t *ED_FindField( const char *name );
ddef_t *ED_FindGlobal( const char *name );
int ED_FindFieldOffset( const char *field );
const char *PR_ValueString( int type, eval_t *val );
dfunction_t *ED_FindFunction( const char *name );
const char *PR_GlobalString( int ofs );
const char *PR_GlobalStringNoContents( int ofs );
bool ED_UpdateEdictFields( edict_t *e );
bool ED_UpdateProgsFields( edict_t *e );
void ED_Print( edict_t *ed );
void ED_PrintEdicts( void );

//
// pr_exec.cpp
//
void PR_ExecuteProgram( func_t fnum );
void PR_RunError( const char *error, ... );
void PR_Profile_f( void );

//
// pr_cmds.cpp
//
bool PR_ValidateArgs( const char *builtin, int num_argc );
void PR_SetTraceGlobals( void );
#define PR_ValidateString( str ) _PR_ValidateString( str, __FILE__, __LINE__ )
void _PR_ValidateString( const char *s, const char *filename, const int fileline );
void PR_InstallBuiltins( void );

//
// pr_message.cpp
//
void PF_WriteByte( void );
void PF_WriteChar( void );
void PF_WriteShort( void );
void PF_WriteLong( void );
void PF_WriteAngle( void );
void PF_WriteCoord( void );
void PF_WriteString( void );
void PF_WriteEntity( void );
void PR_SendMessage( void );

//
// pr_phys.cpp
//
int RunPhysicsFrame( edict_t *pEdict );
void SV_Impact( edict_t *pEdict1, edict_t *pEdict2, TraceResult *trace );
BOOL SV_PlayerRunThink( edict_t *ent, float frametime, double time );

//
// pr_move.cpp
//
BOOL SV_CheckBottom( edict_t *ent );
BOOL SV_MoveStep( edict_t *pEdict, const vec3_t &vecMove, BOOL relink );

//
// pr_world.cpp
//
void SV_LinkEdict( edict_t *ent, BOOL touch_triggers = FALSE );
void SV_CopyTraceToGlobal( TraceResult *trace );
BOOL SV_TestEntityPosition( edict_t *ent );

#endif//PROGS_H